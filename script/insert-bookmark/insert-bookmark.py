import PyPDF2

# 打开PDF文件
pdf_file = open("aaa.pdf", "rb")
pdf_reader = PyPDF2.PdfReader(pdf_file)

# 创建一个PDF写入器
pdf_writer = PyPDF2.PdfWriter()


mulu_map = {
    "目录": 3,
    "第一章简介": 8,
    "第一节关于这本指南": 8,
    "第二节关于 libcst": 9,
    "第三节 libcst 的编译和安装": 11,
    "1.编译和安装": 11,
    "2.特殊的编译选项": 11,
    "第二章 libcstl库的基本概念": 13,
    "第一节 libcstl的组成部分": 13,
    "第二节容器": 14,
    "1.序列容器": 16,
    "2.关联容器": 21,
    "3.容器适配器": 22,
    "第三节迭代器": 22,
    "1.使用关联容器的例子": 25,
    "2.迭代器种类": 31,
    "第四节算法和函数": 32,
    "1.数据区间": 34,
    "2.处理多个数据区间": 36,
    "3.质变算法": 38,
    "4.质变算法和关联容器": 42,
    "5.算法和容器操作函数": 44,
    "6.用户自定义规则": 45,
    "7.自定义规则，函数和谓词": 48,
    "8.libcstl 函数": 53,
    "第五节libcstl容器的使用过程": 54,
    "1.libcstl容器的使用过程": 54,
    "2.数据类型的使用": 55,
    "第三章 libcstl工具类型": 57,
    "第一节 bool_t": 57,
    "第二节 pair_t": 57,
    "1.pair_t的使用过程": 57,
    "2.pair_t的主要操作": 58,
    "3.pair_t的应用实例": 58,
    "第三节 range_t": 62,
    "第四章 libcstl容器": 62,
    "第一节容器的特点和共同的操作": 63,
    "1.容器的共同特点": 63,
    "2.容器的共同操作": 63,
    "第二节 vector_t": 64,
    "1.vector_t的能力": 64,
    "2.vector_t的操作": 65,
    "3.将 vector_t作为数组使用": 67,
    "4.vector_t的使用实例": 68,
    "第三节 deque t": 70,
    "1.deque_t的能力": 70,
    "2.deque_t的操作": 70,
    "3.deque_t的应用实例": 72,
    "第四节 list_t": 73,
    "1.list_t的能力": 74,
    "2.listt的操作": 74,
    "3.list_t的使用实例": 77,
    "第五节 slist_t": 79,
    "1.slist_t的能力": 79,
    "2.slist_t的操作": 79,
    "3.slist_t使用实例": 81,
    "第六节 set_t和 multiset_t": 84,
    "1.set_t 和 multiset_t的能力": 85,
    "2.sett和 multiset_t操作": 86,
    "3.set_t和 multiset_t的使用实例": 89,
    "第七节 map_t 和 multimap_t": 95,
    "1.map_t和 multimap_t的能力": 95,
    "2.map_t和 multimap_t的操作": 95,
    "3.将map_t作为关联数组使用": 95,
    "4.map_t和 multimap_t的使用实例": 95,
    "第八节 hash_set_t,hash_multiset_t,hash_map_t,hash_multimap_t": 100,
    "1.基于哈希结构的关联容器的能力": 101,
    "2.基于哈希结构的关联容器的操作": 101,
    "3.将hash_map_t作为关联数组使用": 103,
    "4.基于哈希结构的关联容器的使用实例": 103,
    "第九节怎样选择容器类型": 107,
    "第五章 libcstl迭代器": 111,
    "第一节迭代器的种类": 111,
    "1.input_iterator_t": 113,
    "2.output_iterator_t": 113,
    "3.forward_iterator_t": 113,
    "4.bidirectional_iterator_t": 114,
    "5.random_access_iterator_t": 114,
    "第二节迭代器的辅助操作": 117,
    "1.使用iterator_advance()移动迭代器": 117,
    "2.使用 iterator_distanceO计算迭代器之间的距离": 119,
    "第六章 libcst1算法": 121,
    "第一节算法的概述": 121,
    "1.算法头文件": 121,
    "2.算法的共同特点": 121,
    "3.算法的种类": 121,
    "第二节非质变算法": 122,
    "1.algo_for_each算法": 122,
    "2.搜索数据": 125,
    "3.统计数据个数": 140,
    "4.数据区间的比较": 141,
    "第三节质变算法": 146,
    "1.拷贝数据": 147,
    "2.交换数据": 155,
    "3.转换和合并": 159,
    "4.替换数据": 163,
    "5.赋值新数据": 167,
    "6.移除数据": 171,
    "7.数据唯一": 175,
    "8.逆序": 181,
    "9.数据轮换": 182,
    "10.随机算法": 185,
    "11.数据划分": 189,
    "第四节排序算法": 191,
    "1.排序整个数据区间": 194,
    "2.部分排序": 198,
    "3.测试数据区间是否排序": 202,
    "4.根据第n个数据排序": 205,
    "5.二分查找": 207,
    "6.合并": 212,
    "7.集合算法": 217,
    "8.堆算法": 222,
    "9.最大值与最小值": 225,
    "10.按照辞典顺序比较": 228,
    "11.数据排列": 231,
    "第五节算数算法": 233,
    "1.对整个区间计算": 234,
    "2.相对值和绝对值转换": 238,
    "第七章 libcstl 函数": 245,
    "第一节函数的种类": 245,
    "1.函数的例子": 245,
    "2.一元函数和二元函数": 248,
    "3.谓词": 248,
    "第二节预定义函数": 249,
    "1.算数函数": 250,
    "2.关系函数": 250,
    "3.逻辑函数": 251,
    "4.其他函数": 251,
    "5.预定义函数的例子": 251,
    "第八章 libcstl容器适配器": 255,
    "第一节堆栈 stack_t": 255,
    "1.核心操作": 256,
    "2.stack_t的使用实例": 256,
    "第二节队列queuet": 258,
    "1.核心操作": 259,
    "2.queue_t的使用实例": 259,
    "第三节优先队列 priority_queue_t": 260,
    "1.核心操作": 261,
    "2.priority_queue_t的使用实例": 261,
    "第九章 libcstl字符串": 263,
    "第一节目的和作用": 263,
    "1.第一个例子：提取模板文件名": 263,
    "2.第二个例子：提取单词并逆序打印": 267,
    "第二节 string_t的操作函数": 269,
    "1.string_t的能力": 269,
    "2.string_t的操作概览": 269,
    "3.初始化和销毁": 271,
    "4.string_t与C字符串": 271,
    "5.大小和容量": 272,
    "6.数据访问": 272,
    "7.关系操作和比较操作": 273,
    "8.赋值": 273,
    "9.数据交换": 274,
    "10.添加和链接": 274,
    "11.插入数据": 274,
    "12.数据删除": 275,
    "13.替换": 275,
    "14.子串": 276,
    "15.输入输出": 276,
    "16.查找": 276,
    "17.迭代器支持": 277,
    "18.NPOS": 278,
    "第三节string_t的使用实例": 278,
    "第十章类型机制": 283,
    "第一节类型注册和复制": 283,
    "1.类型分类和类型机制": 285,
    "2.类型注册函数 type_register": 285,
    "3.类型复制函数 type_duplicate": 286,
    "第二节类型描述": 288,
    "附录：对于直接使用数据的函数的说明": 291
}

# 复制源PDF的所有页面到输出PDF
for page_num in range(len(pdf_reader.pages)):
    page = pdf_reader.pages[page_num]
    pdf_writer.add_page(page)


# 添加书签
# pdf_writer.add_page(pdf_reader.pages[0])
for key,val in mulu_map.items():
    pdf_writer.add_outline_item(key, int(val)+1)
# pdf_writer.add_outline_item("Chapter 1", 0)  # 添加书签到第一页
# pdf_writer.add_outline_item("Chapter 2", 10)  # 添加书签到第11页



# 将书签添加到新的PDF文件
with open("output.pdf", "wb") as output_file:
    pdf_writer.write(output_file)

# 关闭文件
pdf_file.close()
